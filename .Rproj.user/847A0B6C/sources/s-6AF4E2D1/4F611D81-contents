# Function fundamentals

-   function的 3+1 個part

    -   function header: 這個function的名稱\
    -   Docstrings: 開頭註解，讓別人知道這個function主要是幹麻用的, 通常都用三引號夾起來\
    -   function body: 這個function的內容\
    -   output出什麼 (可以是最常見的value, 次常見的print東西出來而已, 或是output出一個新function)

## Single function parameters

```{python}
def square(value): # <- Function header
  # <- Docstrings are below
  """
  Return the square of a value
  """
  new_value = value**2 # <- Function body
  return new_value
```

```{python}
square(4)
```

-   特別注意，如果要return value出來，最後一定要加"return"，不能像R偷懶，以為最後一行就會自己return出來\

-   parameters vs arguments

    -   When you define a function, you write parameters in the function header (所以這邊的value，要叫他parameter)\
    -   When you call a function, you pass argument into the function(所以你call square(4)的時候，這個4叫argument)

## Multiple function parameters

```{python}
def raise_to_power(value1, value2):
  """
  Raise value1 to the power of value2
  """
  new_value = value1 ** value2  
  return new_value
```

```{python}
result = raise_to_power(2,3)
print(result)
```

# Tuple簡介與其在funtion上的應用

-   剛剛的function，都是output出single value，那...如果我想output出multiple value，該怎麼做？\
-   在R裡面，我可能就會包成vector(`c(xxx, ooo)`)，或list，在python裡面，則喜歡包成tuple(而不是python list!!)\
-   為啥？python list不是學的好好的嗎，幹麻又要用新的data structure? tuple和python的list有什麼差別？有什麼共同處？以下一一說明：

## tuple vs list

### tuple用 (,,,)來建立，而list用[,,,]

```{python}
tuple1 = (1,2,3,4)  
print(type(tuple1))

list1 = [1,2,3,4]
print(type(list1))
```

### tuple裡也可放任意type的物件，就像list依樣

```{python}
tuple2 = (1, "dog", True)
print(tuple2)
```

### tuple不可以更改裡面的element，但list可以。這種特性叫immutable

```{python error = TRUE}
print(tuple2[1])
tuple2[1] = "cat"
```

```{python}
print(list1)
list1[1] = 100
print(list1)
```

## tuple最大的用處：可以unpack a tuple into several variables!

```{python}
even_nums = (2,4,6)

#你可以直接把它打開，分別assign到3個變數上  
a, b, c = even_nums


print(a)
print(b)
print(c)
```

-   而這種特性，就是讓他取代list，成為function要output出multiple value時的主要data structure

```{python}
def raise_both(value1, value2):
  """
  Raise value1 to the power of value2
  and vice versa.
  """
  
  new_value1 = value1 ** value2
  new_value2 = value2 ** value1
  
  new_tuple = (new_value1, new_value2)
  
  return new_tuple
```

```{python}
raise_both(2,3)
```

# First practice

-   接下來，做一個練習\
-   先讀取`tweets.csv`這個檔案

```{python}
import pandas as pd
df = pd.read_csv("./data/tweets.csv")
```

```{r}
py$df
```

-   接下來，想去看`lang`這個column(使用的語言是哪種)的frequency table\

-   第一種做法，打算這樣做(這也是詞頻分析時常用的套路)

    -   先建一個空的dictionary\
    -   寫for loop去看`lang`這個column的每個element\
    -   如果此element有在dictionary的key中，我就把他的value + 1
    -   如果此element不在dictionary的key中，我就新增這個key，然後value設為1\
    -   那迴圈結束後，我的dictionary就會是frequency table了

```{python}
col = df["lang"]
col
```

```{python}
langs_count = {}

for entry in col:
  if entry in langs_count.keys():
    langs_count[entry] += 1
  else:
    langs_count[entry] = 1

print(langs_count)
```

-   good，那現在我想把他寫成一個function，只要input 資料 + 想看的欄位，就output這個frequency table給你\

```{python}
# Define count_entries()
def count_entries(df, col_name):
    """Return a dictionary with counts of 
    occurrences as value for each key."""

    # Initialize an empty dictionary: langs_count
    langs_count = {}
    
    # Extract column from DataFrame: col
    col = df[col_name]
    
    # Iterate over lang column in DataFrame
    for entry in col:

        # If the language is in langs_count, add 1
        if entry in langs_count.keys():
            langs_count[entry] += 1 
        # Else add the language to langs_count, set the value to 1
        else:
            langs_count[entry] = 1

    # Return the langs_count dictionary
    return langs_count
```

```{python}
# Call count_entries(): result
result = count_entries(df, 'lang')

# Print the result
print(result)
```

# Variable scope

-   在我們寫python script時，不是所有的object都accessible，當我們在call一個object時(不管是一個function的object，或一個variable的object)，他其實都是依照scope的概念做搜尋和調用

-   在python中分為三種scope，階層上由高到低分別為：

    -   built-in scope: 一些pre-define好的functions，例如`sum`。\
    -   global scope: 就是寫main script的地方\
    -   local scope: 就是你define一個function時，他的body就是個local scope

-   當你在某個scope中要找一個object，他會先在這個scope中找，如果找不到，他就往上找

-   舉個例子，如果你在global中沒有定義過`sum`，那你在main script中打sum，他會先在global scope裡找sum，那當然找不到，所以他就會往built-in scope找，他就找到sum這個加總的函數了。\

-   同理，你如果在自己寫的function中，去call `sum`，那其實他是先在local scope中尋找你有沒有定義過`sum`，沒有，所以又去global中找`sum`，又沒有，才去built-in中找`sum`，找到了，就把這個built-in function拿來用\

-   scope管的是object，所以除了剛剛舉的`sum`這種函數要遵守外，一班我們自己定義的變數也都要遵守。因為不管是函數或是變數，都是一個object\

-   例如，你寫一個function，那此function中，如果要用到`num`這個變數，他就會先在local scope找，找到就用了，找不到，才往global scope找，再找不到，才往built-in scope找。\

-   又例如，你就在main script中，要用`num`，那因為現在你在global scope了，所以他會先在global scope上找`num`，找不到才往built-in scope找\

-   多來點例子吧：

## local scope中定義的object，無法在global scope中提取

```{python}
def func1():
    num = 3
    print(num)
```

```{python}
func1()
```

```{python error = TRUE}
num
```

-   在此例中，`num`是在local scope中被定義的，所以你在global中call他，他會先在global scope中找，找不到`num`，他就往上一層去built-in scope找，也找不到，所以就return error給我們\
-   而此例中，在function內的local scope，call `num`，他就先在local scope裡找，找到`num`是3，所以就print出3給我們

## 用global這個keyword，把local scope的object給推到global scope

```{python}
def func1():
    global num
    num = 3
    print(num)
```

```{python}
func1()
```

```{python}
num
```

## 綜合練習

```{python}
num = 5
def func1():
    num = 3
    print(num)
```

```{python}
func1()
print(num)
```

-   執行 func1() 時，`num`在local scope找，找到3，他就用了，所以print出3，不會print出5\
-   在main script中打`print(num)`，他就會先在global scope中找，找到num = 5，就print出來，他不會去local scope中找num =3。而且，local scope中定義的num=3，也不會洗掉global中的num = 5

```{python}
num = 5
def func1():
    global num
    num = 3
    print(num)
```

```{python}
func1()
print(num)
```

-   可以看到用了`global num`這個寫法，local中的num=3就洗掉global scope中的num=5

```{python}
num = 5
def func2():
    global num
    double_num = num * 2
    num = 6
    print(double_num)
```

```{python}
func2()
print(num)
```

-   在執行 func2()的時候，裡面用到的num\*2，他會先在local中找num，找不到，所以用global scope的num=5帶入，所以double\_num才會是10\
-   但fun2()內部，又定義了num = 6，且經由`global num`被推到外面去，洗掉原本global scope中的num=5，所以現在在global scope的num變成6，而不是5

# Nested function

-   就像我們在main script上，同一種pattern的code，複製貼上三次，就會想寫一個function一樣，如果我今天在自己定義的function中，同一種pattern的code，也複製貼上三次，那我就會想寫一個inner function\
-   這個inner function，就叫nested function

```{python}
# 醜醜的例子
def mult2plus5(x1, x2, x3):
    """multiply 2 thenplus 5 for input three values."""

    new_x1 = x1 * 2 + 5
    new_x2 = x2 * 2 + 5
    new_x3 = x3 * 2 + 5

    return (new_x1, new_x2, new_x3)

print(mult2plus5(2,3,4))
```

```{python}
# 改寫成nested function的例子
def mult2plus5_nested(x1, x2, x3):
    """multiply 2 thenplus 5 for input three values."""
    # inner function (nested function)
    def inner(x):
      value = x*2 + 5
      return value
    
    return (inner(x1), inner(x2), inner(x3))

print(mult2plus5_nested(2,3,4))    
```

-   所以nested function的主要用途，就是節省力氣拉，沒什麼特別的\

-   此外，這邊可以把scope的概念，講的更細節一點\

-   對`mult2plus5_nested()`這個function來說，他的body就已經是一個local scope了，但裡面又多了`inner()`這個function的body的scope，那名稱上該怎麼稱呼呢？\

-   習慣上，最下面的階層，我們統一稱為local scope，所以現在local scope這個名字，要給`inner()`的body來用\

-   那`inner()`的上一層scope，我們會稱enclosing function scope\

-   所以，把scope的搜尋階層講完整，就會是LEGB:

    -   先搜*L*ocal scope\
    -   再搜*E*nclosing function scope\
    -   再搜*G*lobal scope\
    -   最後*B*uilt-in scope

-   那既然最底下一層是local了，剛剛有`global`指令可以把local定義的object推到global scope，那現在我當然也想把local定義的object推到Enclosing function，這時要用的指令是`nonlocal`\

-   綜合練習一下

```{python}
def outer1():
    """Prints the value of n."""
    n = 1

    def inner():
        n = 2
        print(n)

    inner()
    print(n)
```

```{python}
outer1()
```

-   可以看到，先print出的`inner()`，用的n是local scope的n，所以是n=2\
-   後print出的n，用的n是enclosing function的n，所以是n=1
-   現在，加入`nonlocal n`試試：

```{python}
def outer2():
    """Prints the value of n."""
    n = 1

    def inner():
        nonlocal n
        n = 2
        print(n)

    inner()
    print(n)
```

```{python}
outer2()
```

-   cool\~ 最後要print出的n，他在enclosing function scope中找，他不是找到一開始定義的n=1，而是找到在local端定義好，然後被推到enclosing function scope的n=2

# Closure

-   剛剛示範了nested function，他被用來簡化原function內部的計算。但原function所output的東西，還是一般的value(在上例中，是tuple)\
-   但很酷的是，你也可以output出這個nested function。\
-   這種output也是function的function，在CS中，被稱為closure\
-   例如這樣：

```{python}
def raise_val(n):
    """Return the inner function."""

    def inner(x):
        """Raise x to the power of n."""
        raised = x ** n
        return raised

    return inner
```

```{python}
square = raise_val(2)
cube = raise_val(3)
print(square(2), cube(4))
```

-   酷...我input東西後，可以製作出各式各樣的function\
-   那，為啥要這麼做呢？ 其實很簡單啊，還是在偷懶啊。想想看，如果今天你要寫個2次方的function，3次方的function，4次方的function...，你要一直重複定義這些一樣pattern的寫法(def function(x) x\*\*2)，你不累嗎？所以我就寫個general function，然後你只要輸入n，我就給你n次方的function\
-   此外，Closure的更重要的好處是，一般的funciton，你定義完，執行後，他在local scope的資訊都無法調用了; 但是，如果今天是closure，他還可以"記得"enclosing function scope中的定義過的東西。

# Default argument

-   這很easy拉，就簡單給個例子就好

```{python}
def power(number, pow = 1):
  """Raise number to the power of pow."""
  new_value = number ** pow
  return new_value
```

```{python}
print(power(9, 2))
print(power(9))
```

# Flexible argument (\*args)

-   如果我想很flexible的，讓user可以想丟幾個argument就丟幾個argument進來我的function的話，那就可以加上`*args`這個parameter。\
-   舉個例子，我想寫一個加總的function，user丟3個數字進來，我就幫他加總3個，user丟9個數字進來，我就幫他加總9個，所以其實一開始我沒辦法訂好我的function要幾個參數，那我就把參數名稱定義成`*args`，來代表user想丟幾個進來都可以(事實上，只要星號開頭即可，星號後你要寫啥都沒關係，例如`*a`, `*abcd`都可以，只是習慣上大家喜歡寫`*args`，因為照字面意義就知道他是flexible arguments)\
-   一旦你把參數定成`*args`，它吃進function後，就會先把這堆args串成list，並命名為args，所以在你的function內，可以調用`args`這個object\
-   直接看例子：

```{python}
def add_all(*args):
  """Sum all values in *args together."""
  
  ### Initialize sum
  sum_all = 0
  
  # Accumulate the sum
  for num in args: # args就是把user丟的所有arguments串成一個list，讓你使用
    sum_all = sum_all + num
  
  return sum_all
```

```{python}
print(add_all(1,2,3))
print(add_all(1,2,3,4,5))
```

# Flexible keyword argument (\*\*kwargs)

-   剛剛的flexible argument是給沒有keyword的argument使用，那有keyword的勒？那參數就用`**kwargs`\
-   剛剛的`*args`會把user丟來的arguments串成list再assign成args這個object供我們使用，那現在因為keyword=value都是user定的，所以python就把user丟來的每個keyword+value都組起來變成kwargs這個dictionary供我們使用\
-   例如

```{python}
def print_all(**kwargs):
  """Print out key-value pairs in **kwargs."""
  
  # Print out the key-value pairs
  for key, value in kwargs.items():
    print(key + ": " + value)
```

```{python}
print_all(name = "Hank Lee", job = "Data Scientist", height = "184", weight = "80")
```

# map/filter/reduce with lambda function

## map with lambda

-   這邊要先介紹lambda function，也就是anonymus function。\
-   就是我們在使用map的時候，想要使用「用完即丟」的無名function，這個function就叫lambda function\
-   舉例來說，我有一個list，裡面每個element都是一個單詞，然後我想用map function去對此list的每個element做以下的運算：算單詞字長+2。那我就可以這樣寫：

```{python}
voc_list = ["Hank", "statistics", "basketball", "nice guy"]
result_map = map(lambda x: len(x)+2, voc_list)
print(result_map)
print(list(result_map))
```

-   從這個例子可以看到以下用法：

    -   `map`在python中，是先定義函數，再放iterable object進去。但在R裡面是倒過來，先給iterable object，才放自定義函數\
    -   自定義函數這邊，我們其實只想放個用完即丟的函數，不想先在外面定義好，才拿進來用。這時候，就會用到lambda function\
    -   這個lambda function的寫法，就是先宣告他是lambda function & 提供input parameter，加上冒號後，寫下function body就完成。所以他不用在一開始寫def，也不用在結束後寫return，省去很多麻煩。更重要的是，沒有額外在main script定義函數，所以減少了記憶體空間(因為不需要開個記憶體空間來存這個定義的函數)\
    -   map後的結果，是一個map object，要用`list()`把他轉成list，才看得到最後的結果

## filter with lambda

-   接下來講`filter`，他的寫法是這樣：`filter(lambda function, iterable)`，其中，這個lambda function的回傳值要是True/F alse，而filter的回傳值，就是把iterable所對應到的True給回傳出來\
-   所以很符合R的filter的用法：符合的，篩選出來\
-   看個例子：我想篩選出iterable中，字長+2後\>9的：

```{python}
print(voc_list)
result_filter = filter(lambda x: len(x)+2 > 9, voc_list)
print(list(result_filter))
```

-   接下來做個練習，剛剛的tweets data，有個column是text，如下：

```{python}
df['text']
```

-   其中，我覺得RT開頭的資訊對我來說蠻重要的，所以我想擷取出RT開頭的text。那這時就可以用到filter

```{python}
result = filter(lambda x: x[0:2]=="RT", df['text'])
res_list = list(result)
print(res_list[0:5])
```

## reduce with lambda

-   最後，講到reduce function\
-   他的作用直接舉例比較快： 我有一個list: [1,2,3,4,5]，我現在想要從最前面開始做兩個element的相加，也就是：1+2 = 3, 3+3 = 6, 6+4 = 10, 10+5 = 15\
-   那就可以用`reduce(lambda x, y: x+y, list)`\
-   小提醒是，reduce這個function住在functools這個package裡，所以要先import他：

```{python}
from functools import reduce
import numpy as np
num_list = [1,2,3,4,5]
result_reduce = reduce(lambda x, y: x+y, num_list)
print(result_reduce)
print(sum(num_list))
```

# Error handling

## try-except

-   就是R裡的try catch，我們把我們的function body放在try下面，然後把遇到error後要進行的行為，放在excep下面：\
-   舉個例子，我想寫一個function，有兩個parameter，第一個是字串，第二個是要讓這個字串重複幾次，寫法如下：

```{python}
# Define shout_echo
def shout_echo(word1, echo=1):
    """Concatenate echo copies of word1 and three
    exclamation marks at the end of the string."""
    
    echo_word = word1 * echo
    shout_words = echo_word + "!!!"
    return shout_words
```

```{python}
shout_echo("hank", 5)
```

-   那如果今天user很北七，echo這個參數，他不給數字，反而給文字怎辦？

```{python error = TRUE}
shout_echo("hank", "five")
```

-   python會print出"TypeError"，但裡面的資訊，其實無法讓user知道他錯在哪。\
-   所以，我可以寫個try-except，然後當發生error時，提醒user，參數word1要放字串，參數echo要放integer:

```{python}
# Define shout_echo
def shout_echo(word1, echo=1):
    """Concatenate echo copies of word1 and three
    exclamation marks at the end of the string."""

    # Add exception handling with try-except
    try:
        # Concatenate echo copies of word1 using *: echo_word
        echo_word = word1 * echo

        # Concatenate '!!!' to echo_word: shout_words
        shout_words = echo_word + "!!!"
        
        # Return shout_words
        return shout_words
        
    except:
        # Print error message
        print("word1 must be a string and echo must be an integer.")
```

```{python}
shout_echo("hank", echo="five")
```

## raise

-   其實只要用剛剛的try-except，已經可以解決大部分的問題，但有時候問題不是出在他有error，而是python自動給你一個意想不到的結果，而你不希望用他\
-   例如，如果把字串\*3，他會幫你重複3次，那把字串乘以-3呢？他不會給你error，他會給你空字串！！

```{python}
"hank"*(-3)
```

-   所以，如果套用回剛剛寫好的function，答案會變這樣：

```{python}
shout_echo("hank", echo = -3)
```

-   這其實不是我要的。我要的，是要終止程式，然後print出message說，echo不可以給負數\
-   那這時候`raise`就派上用場了，我們可以把他想成R裡面的`stop("error message")`，他的作用就是如此，只是，他的error message不能直接寫 `raise print("error message")`，而是要把error type也寫進去，變成 `raise ValueError("error message")`。至於，有哪些error type? 目前我知道的有ValueError, TypeError，其他就要去查python文件才知道。至於為什麼要寫error type，那是因為python本來在show error時，就一定會跟你講是哪種error type，所以當你要raise一個error出去時，就得選一個error type來跟user說，所以重點是有說哪種type就好，你要選啥type的error，其實隨你高興。而這邊因為我知道是value的error，不是type的error，所以我選擇跟user說，你這是value的error喔，因為value不可以是負的\
-   看例子：

```{python}
# Define shout_echo
def shout_echo(word1, echo=1):
    """Concatenate echo copies of word1 and three
    exclamation marks at the end of the string."""

    if echo<0:
        raise ValueError('echo must be greater than or equal to 0')
    
    # Add exception handling with try-except
    try:
        # Concatenate echo copies of word1 using *: echo_word
        echo_word = word1 * echo

        # Concatenate '!!!' to echo_word: shout_words
        shout_words = echo_word + "!!!"
        
        # Return shout_words
        return shout_words
        
    except:
        # Print error message
        print("word1 must be a string and echo must be an integer.")
```

```{python error = TRUE}
shout_echo("hank", -3)
```
