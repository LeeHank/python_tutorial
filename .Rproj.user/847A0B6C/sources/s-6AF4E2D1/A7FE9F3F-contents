# Module and Package  

## 什麼是module？ 

* 把function, class, objects...寫在一個script，方便我們去source他，這個script就叫module  
* 例如，我寫了一個`math.py`如下：  

```{python eval = FALSE}
import numpy as np

def my_max(*args):
  print("最大值是" + str(np.max(np.array(args))))

def my_min(*args):
  print("最小值是" + str(np.min(np.array(args))))
  
class People:
  def __index__(self, name, age):
    self.name = name
    self.age = age

MAX_NUM = 100
```

* 那`math.py`這個檔案，就叫module

## 什麼是package？  

* 只要一個資料夾，裡面有`__init__.py`這個檔案，那這個資料夾就叫package  
* 例如，我現在在目前的directory下，新增一個`my_package`資料夾，然後此資料夾裡面新增一個`__init__.py`的檔：  

```{bash eval = FALSE}
# bash
mkdir my_package
touch ./my_package/__init__.py
```

* 此時，`my_package`這個資料夾，就叫一個package了  
* 我們可以把剛剛寫好的module(math.py)，放到這個資料夾底下，現在my_package就長成：  

```{bash}
# bash
ls ./my_package
```

* 想像之前做`import numpy as np`，那現在就是`import my_package.math as mm`  
* 那之前用`np.array()`這個function時，就好像現在用`mm.my_max()`這個function  

```{python}
import my_package.math as mm
mm.my_max(1,2,5)
```

## Python的內建module  

* 我們可以用`sys`這個package中的`sys.path`指令，來看內建的module都放到哪裡了  

```{python}
import sys
sys.path
```

* 可以發現，內建的modules，都放在"/Users/hanklee/.pyenv/versions/3.8.0/lib/"這裡面  

## 第三方module和package  

* 第三方的modules(e.g. pandas這種你自己pip install的東西)，會放在"/Users/hanklee/.pyenv/versions/3.8.0/lib/"這裡面  

## 關於import語句  

* 三種寫法：  
  * import {package}: e.g. import numpy  
  * import {package} as {nick_name}: e.g. import numpy as np
  * from {package} import {function}: e.g. from numpy import array  
  * from {package} import \*: e.g. from numpy import \*  
* 使用時機上，import內建或第三方套件時，習慣用第一種和第二種; import自己寫的local package/module時，習慣用第三種(或是像keras這種超大package，裡面一堆module的，也會用這種寫法，例如： from keras.layers import Dense); 第四種是最雷最不推薦的，因為這樣寫會把numpy中所有methods, attributes全都到倒local environment中，很可能覆蓋掉你前面定義過的東西  
* 至於在程式寫作的慣例上，import的package會寫在script的最上面，且排列如下：  

```{python eval = FALSE}
import sys #內建package寫在最上面

import flask #第三方package寫在第二層  

from my_package.math import my_max #自己寫的local package寫在第三層 
```




