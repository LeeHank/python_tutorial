[["index.html", "Python Tutorial Introduction", " Python Tutorial Hank Lee 2022-01-08 Introduction 這邊是總結Udemy上的python內容 "],["python-environmental-setting.html", "Chapter 1 Python Environmental Setting 1.1 [mac + zsh shell] 用pyenv，安裝/切換 python 1.2 [linux + bash shell] 安裝python待整理 1.3 [windows + gitbash] 安裝python待整理 1.4 用pip安裝/移除/條列套件 1.5 requirements.txt 1.6 用virtualenv來隔離乾淨的開發環境", " Chapter 1 Python Environmental Setting 要開始用python前，我們要先學如何安裝python 對我的mac來說(對linux應該也是)，系統其實有預先安裝python了，只是是2.0的版本，並不適合使用。可以在terminal中輸入python --version來查看 那我是用pyenv這個python版本管理工具，來進行python的安裝 他的好處是，有一個統一的架構，可以安裝各種版本的python。並視專案的需要，可以輕鬆切換不同版本的python來使用 那就先整理： OS 為 mac, terminal為zsh 安裝方式為透過pyenv來安裝 至於其他作業系統(e.g. Linux, Windows)，或其他安裝方式(e.g. 直接安裝python, 透過anaconda安裝…)，就留待之後有空再整理 以下會整理我實際的操作步驟，至於細節，可以到pyenv的官網去看: https://github.com/pyenv/pyenv 1.1 [mac + zsh shell] 用pyenv，安裝/切換 python 1.1.1 先安裝pyenv 首先，在mac上，用homebrew來下載pyenv這個套件 brew update brew install pyenv 安裝完成後，確認一下目前根目錄下，有沒有 .zshrc 這個檔案 open ~/.zshrc 應該是會有拉。如果沒有的話，就新增這個檔 touch ~/ .zshrc 然後，在terminal輸入以下指令： echo -e &#39;if command -v pyenv 1&gt;/dev/null 2&gt;&amp;1; then\\n eval &quot;$(pyenv init -)&quot;\\nfi&#39; &gt;&gt; ~/.zshrc 其實上面這行，等價於你先打開.zshrc檔(i.e. open / .zshrc)，然後在”最下面”，加入以下指令： if command -v pyenv 1&gt;/dev/null 2&gt;&amp;1; then eval &quot;$(pyenv init -)&quot; fi 這個指令的重點就是，eval \"$(pyenv init -)\"，用意是Add pyenv init to your shell to enable shims and autocompletion。那每次我們開shell時，他都會幫我們執行 pyenv init，那使用python時，就會到pyenv指定的路徑找python，而不會找到系統版的python(2.x.x版) restart shell，讓設定生效 1.1.2 安裝指定版本的python 在terminal中輸入以下指令 pyenv install 3.8.0 (Todo: 去確認reticulate網頁，我記得要讓R可以用的話，pyenv install 3.8.0後面還要加argument才行) 安裝完成後，確認現在pyenv有哪些版本： pyenv versions 有加*的，表示目前正在使用的版本 1.1.3 切換/指定 要使用的python的版本 先學這個簡單的就好，我們用以下指令來指定我要用的版本： pyenv global 3.8.0 那確定一下有切換過去： pyenv versions 並用系統指令再確認一下，現在在用的版本 python --version # 看正在使用的python的版本 which python # 看使用的python的路徑 1.1.4 先用terminal快速執行一個.py檔 確認沒問題後，我們在桌面新增這個myfirstpython.py檔案 # myfirstpython.py print(&quot;Hello Python&quot;) 然後，在terminal輸入以下指令，即可執行： python myfirstpython.py 前面的python，他就會去找現在路徑底下的python，也就是which python的這個python 後面的myfirstpython.py，他是去找現在工作目錄下的這個.py檔，也就是pwd下的myfirstpython.py 所以，也可以給絕對路徑，來執行.py檔： /Users/hanklee/.pyenv/shims/python /Users/hanklee/Desktop/myfirstpython.py 1.1.5 pyenv 常用命理整理 1.1.5.1 Python配置 # 檢視系統當前安裝的python列表 pyenv versions # 列出可安裝版本 pyenv install --list # 安裝指定版本 Python pyenv install -v 3.5.1 # 解除安裝指定版本 Python pyenv uninstall 2.7.3 # 顯示當前python安裝路徑 pyenv which python # 建立墊片路徑 # 為所有已安裝的可執行檔案建立 shims # 如：~/.pyenv/versions/*/bin/* # 每當你增刪了 Python 版本或帶有可執行檔案的包（如 pip）以後，都應該執行一次本命令 pyenv rehash 1.1.5.2 Python 切換 # 設定全域性的 Python 版本，通過將版本號寫入 ~/.pyenv/version 檔案的方式 pyenv global &lt;版本號&gt; # 設定面向程式的本地版本，通過將版本號寫入當前目錄下的 .python-version 檔案的方式。通過這種方式設定的 Python 版本優先順序較 global 高。 # pyenv 會從當前目錄開始向上逐級查詢 .python-version 檔案，直到根目錄為止。若找不到，就用 global 版本。 pyenv local &lt;版本號&gt; # 設定面向 shell 的 Python 版本，通過設定當前 shell 的 PYENV_VERSION 環境變數的方式。這個版本的優先順序比 local 和 global 都要高。 pyenv shell &lt;版本號&gt; # --unset 引數可以用於取消當前 shell 設定的版本。 pyenv shell --unset 1.2 [linux + bash shell] 安裝python待整理 1.3 [windows + gitbash] 安裝python待整理 1.4 用pip安裝/移除/條列套件 pip本身就是個python的package，他的用途是協助安裝python的第三方package 從python 3.4以後，只要安裝python，就會幫你安裝pip這個package，但版本可能比較低，所以還要自己更新 整理常用的指令如下： # 先確認版本已是最新版 pip install --upgrade pip # 安裝套件 pip install flask sudo pip install flask # linux # 移除套件 pip uninstall flask # 觀看目前所有安裝過的套件 pip freeze 這邊特別注意最後一個指令pip freeze，他列出所有目前安裝過的套件與版本號，這對reproducible research很有用 1.5 requirements.txt 假設現在我們用python開發了一個package，而開發過程中，我陸續安裝了很多package來搭配使用，那，當別人用我的package時，他也需要安裝我曾經安裝過的這些packages，才能正常使用 那這時就可以這樣做： # 將目前系統有安裝過的python package條列出 # 存成requirement.txt，提供給別人 pip freeze &gt;&gt; requirement.txt # 別人只要下載你的requirement.txt # 並執行以下指令即可reproduce你用的套件版本 pip install -r requirements.txt 所以，我們如果去github看人家python的專案，例如ansible/ansible這個專案，就可以看到他有附”requirements.txt”這個檔案 1.6 用virtualenv來隔離乾淨的開發環境 剛剛用”requirements.txt”來解決package和版本問題，似乎很方便，但其實很多小問題在裡面 例如，你的python從安裝開始，到你開發結束，早就安裝一堆package了，其中很多package是和你的專案無關的，但你用pip freeze就只能全抓 我們常常不只開發一個專案，有可能當我們開發專案A時，install了flask，然後當我們開發專案B時，又install了flask，而這兩個flask的版本是不同的。假設前者的版本是flask 1.1.0，後者是flask 1.2.0，那當我們用pip freeze時，他只會保留最新的，也就是flask 1.2.0，那…就有可能在re-run A專案時，遇到bug，因為flask的版本已經不一樣了 為了解決這個問題，python的熟手，都是習慣每個專案擁有自己的虛擬環境(virtual environment)，那我的package就裝在自己的虛擬環境中，到時候要打包，要freeze灌過的package給人家，就直接在這虛擬環境中下指令就好 1.6.1 用terminal，透過virtualenv()來開虛擬環境 我直接用flask課堂上的專案來做舉例 首先，我開啟VSCode，用他的terminal功能，把工作目錄，切到以下路徑：/Volumes/GoogleDrive/我的雲端硬碟/0. codepool_python/flask_tutorial/udemy_flask_web/helloworld 並且確認一下當前使用的python版本，與python路徑 然後執行以下兩個指令，來建立並進入虛擬環境 # 在當前目錄下，建立一個虛擬環境資料夾，叫`.env` # (要不要加`.`都無所謂，你要寫`env`或`hahaha`都可以) virtualenv .env # 進入此虛擬環境 source .env/bin/activate 截圖如下： 進入虛擬環境後，我們可以用pip freeze觀察，目前已經安裝哪些套件了，結果發現啥都沒有(合理嘛) 然後安裝flask後(pip install flask)後，再觀察一次pip freeze，就看到已經安裝許多東西進去了 我們可以用pip freeze &gt;&gt; requirement.txt把這個結果寫出來 最後，要離開時，再key入deactivate，就跳出此虛擬環境了。 截圖如下： 1.6.2 用terminal，透過pyenv-virtualenv來開虛擬環境 這邊還沒用過，我從此網頁把操作流程copy下來，他整理的蠻清楚的。 pyenv-virtualenv 是 pyenv 下基於 virtualenv 的一款外掛，通過 pyenv-virtualenv 外掛可以很好的和 virtualenv 結合。 1.6.2.1 安裝 使用 homebrew 安裝 pyenv-virtualenv : brew install pyenv-virtualenv 安裝之後需要執行如下配置： # 使用 zsh shell vim ~/.zshrc # 使用系統預設 vim ~/.bash_profile # 在 `.zshrc` 或 `.bash_profile` 檔案最後寫入： # pyenv-virtualenv if which pyenv-virtualenv-init &gt; /dev/null; then eval &quot;$(pyenv virtualenv-init -)&quot;; fi # 使配置生效 source ~/.zshrc # or source ~/.bash_profile 1.6.2.2 使用 # 建立虛擬環境 # 若不指定 Python 版本，預設使用當前環境 Python 版本 pyenv virtualenv &lt;Python 版本號&gt; &lt;虛擬環境名稱&gt; # 列出當前虛擬環境 pyenv virtualenvs # 啟用虛擬環境 pyenv activate &lt;虛擬環境名稱&gt; # 退出虛擬環境 pyenv deactivate # 刪除虛擬環境 pyenv uninstall &lt;虛擬環境名稱&gt; 1.6.3 用vscode開虛擬環境專案 1.6.4 用pycharm開虛擬環境專案 "],["執行python的code.html", "Chapter 2 執行Python的code 2.1 command line 2.2 在VS code中執行 2.3 在 RStudio 中執行", " Chapter 2 執行Python的code 2.1 command line 2.1.1 用interactive mode 執行 在command line，打python或ipython，就會進入互動視窗，然後就可以互動的執行了 要結束時，再按quit()，就會退出視窗 ipython print(&quot;Hello, World&quot;) quit() 2.1.2 寫成.py檔後執行 我們可以開一個script，在裡面寫code，然後存成.py檔，例如hello.py 然後，在command line，用python /path/to/this/file/hello.py，就可以執行這個.py檔了 2.2 在VS code中執行 2.2.1 設定要使用的python版本 以下內容，整理至官方網站： https://code.visualstudio.com/docs/python/environments 打開VS code後，輸入command+shift+p (⇧⌘P)，然後key入preferences: open user settings，開啟設定。然後照下面圖面做設定： 打開json檔後，做以下的輸入： { &quot;jupyter.alwaysTrustNotebooks&quot;: true, &quot;python.pythonPath&quot;: &quot;/Users/hanklee/.pyenv/versions/3.8.0/bin/python&quot;, &quot;terminal.integrated.env.osx&quot;: { &quot;PATH&quot;: &quot;&quot; } } 這邊要注意的只有裡面的兩行一定要有： \"python.pythonPath\": \"/Users/hanklee/....\"， 這邊的路徑，就是放你想要跑的版本。例如我都用pyenv來管理我的python version，那我可以在terminal用pyenv global 3.8.0來選定我要用3.8.0的版本後，再下which python，來得到這個版本的路徑。做完這行設定後，只要在VScode中點視窗右上角的run，他就會幫你下達這個指令：path/to/python/version path/to/this/file。 \"PATH\": \"\"，這個指令，是我google到的解法(連結)，主要是要解決，在VScode中，我開視窗下面的terminal，但執行python時，還是沒有執行到python.pythonPath的版本。 2.2.2 腳本執行 這邊再找時間舉個例子做截圖吧。用hello-world.py這種script，示範點選畫面右上角的箭頭來run，或是底下的terminal自己key python hello-world.py都可以。 2.2.3 逐行執行 逐行執行的部分，要再查一下，目前就只會在jupyter中逐行執行，但很笨 2.2.4 debug ToDo… 2.3 在 RStudio 中執行 應該要用Reticulate的架構來整理，等有空再說吧 2.3.1 新增檔案/python script 只要新增一個.py的檔案，就可以像寫R一樣逐行執行 2.3.2 用RMarkdown 開RMarkdown檔案，然後用command + option + p，開啟python的chunk，就可以執行了 "],["註解與indention.html", "Chapter 3 註解與indention 3.1 插入註解 3.2 indention", " Chapter 3 註解與indention 3.1 插入註解 python的註解和R一樣，都是用井字號，只要記得加空格來維持PEP8代碼風格即可： # 有空一格就是好註解 #沒有空格是爛註解 print(&quot;Hello, World!&quot;) 另外，在Python中，如果字串沒有被assign到一個變數，那會自動被忽略。所以，需要多行註解時，可以善用字串寫法: &quot;&quot;&quot; This is a comment written in more than just one line &quot;&quot;&quot; print(&quot;Hello, World!&quot;) 3.2 indention 在R或其他語言，經常是用大括號來包住function body，例如： my_func = function(x){ # 有大括號就是放心 a = x + 1 return(a) } 但在Python都是靠indent: def my_func(x): # 靠indent來營造出coding block a = x + 1 return(a) my_func(4) #&gt; 5 "],["print.html", "Chapter 4 print 4.1 print可以放多個element進去 4.2 用sep=來改間隔", " Chapter 4 print print()雖然很簡單，但有一些我原本不清楚的東西，所以整理一下 4.1 print可以放多個element進去 例如： a = &quot;number&quot; b = 123 print(a, b, &quot;cool&quot;) #&gt; number 123 cool 可以發現，他不同的element間，用空格幫你隔開。這個空格是預設的，可以改。 4.2 用sep=來改間隔 看一下help文件(?print)，可以發現有sep = ' '這個argument，預設值是空格。所以改一下就可以換了 a = &quot;number&quot; b = 123 print(a, b, &quot;cool&quot;, sep = &quot;++&quot;) #&gt; number++123++cool "],["variables.html", "Chapter 5 Variables 5.1 overview 5.2 variable names 5.3 一次assign多個variables 5.4 Assignment Operators 5.5 variable scope", " Chapter 5 Variables 5.1 overview 5.1.1 建立variable python和R一樣，都不用宣告資料類型，就可以assign variable了： x = 4 # x is of type int x = &quot;Sally&quot; # x is now of type str print(x) #&gt; Sally 如果想要和C/Java一樣，assign variable時同時宣告資料類型，那要用casting x = str(3) # x will be &#39;3&#39; y = int(3) # y will be 3 z = float(3) # z will be 3.0 5.1.2 用type()來確認variable資料類型 x = 5 y = &quot;John&quot; print(type(x)) #&gt; &lt;class &#39;int&#39;&gt; print(type(y)) #&gt; &lt;class &#39;str&#39;&gt; 5.2 variable names 5.2.1 規則 python中對variable name的要求是： 只能是由alpha-numeric + underscores所組成(A-z, 0-9, _) 開頭不能是數字，只能英文或底線 case-sensitive，大小寫有差拉 # 合法的variable name myvar = &quot;John&quot; my_var = &quot;John&quot; _my_var = &quot;John&quot; myVar = &quot;John&quot; MYVAR = &quot;John&quot; myvar2 = &quot;John&quot; # 不合法的variable name 2myvar = &quot;John&quot; my-var = &quot;John&quot; my var = &quot;John&quot; 5.2.2 多個字的variable name 如果variable name想由多個字組成，哪有三種習慣性寫法： Snake Case: 像蛇一樣一節一節的，用底線隔開，例如 my_variable_name Pascal Case: 每個字的開頭都給他大寫，例如 MyVariableName Camel Case: 像駱駝一樣，頭低低，後面駝峰都高起，所以首字小寫，之後都大寫，例如 myVariableName 5.3 一次assign多個variables 5.3.1 多個value，assign給多個variable x, y, z = &quot;Orange&quot;, &quot;Banana&quot;, &quot;Cherry&quot; print(x) #&gt; Orange print(y) #&gt; Banana print(z) #&gt; Cherry 5.3.2 同一個value，assign給多個variable x = y = z = &quot;Orange&quot; print(x) #&gt; Orange print(y) #&gt; Orange print(z) #&gt; Orange 5.3.3 unpack a collection 在python中，collection包含list, tuple, dictionary, set 那我可以把這些collection中的各個element，assign給各個variable，例如： fruits = [&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;] x, y, z = fruits print(x) #&gt; apple print(y) #&gt; banana print(z) #&gt; cherry 而這招最常用的還是用在tuple上： fruits = (&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;) x, y, z = fruits print(x) #&gt; apple print(y) #&gt; banana print(z) #&gt; cherry 5.4 Assignment Operators Python有許多assignment operators，整理如下： Operator Example Same As = x = 5 x = 5 += x += 3 x = x + 3 -= x -= 3 x = x - 3 *= x *= 3 x = x * 3 /= x /= 3 x = x / 3 %= x %= 3 x = x % 3 // x //= 3 x = x // 3 **= x **= 3 x = x ** 3 備註： x % 3的意思是，我要取餘數 x // 3的意思是，我要取商 x ** 3的意思是，x的3次方 5.5 variable scope 5.5.1 Global Variables 想把function中的variable(e.g. x這個variable)，拉到global environment，就先用global x來宣告我的x是屬於global的，之後在這個function內把value給assign到x，就會放在global environment裡： 來看看沒宣告的例子： x = &quot;awesome&quot; def myfunc(): x = &quot;fantastic&quot; print(&quot;Python is &quot; + x) myfunc() #&gt; Python is fantastic print(&quot;Python is &quot; + x) #&gt; Python is awesome 再看看有宣告的例子： x = &quot;awesome&quot; def myfunc(): global x x = &quot;fantastic&quot; print(&quot;Python is &quot; + x) myfunc() #&gt; Python is fantastic print(&quot;Python is &quot; + x) #&gt; Python is fantastic "],["python-data-types.html", "Chapter 6 Python Data Types 6.1 Built-in Data Types 6.2 Getting the data type 6.3 Setting the specific data type", " Chapter 6 Python Data Types 6.1 Built-in Data Types python內建的data type，我喜歡把他分成三大類： 基本款 collections binary 6.1.1 基本款 基本款： Text: str Numeric: int, float, complex Boolean: bool 6.1.2 collections collections(array): Sequence: list, tuple, range mapping: dict set: set, frozenset 6.1.3 binary binary types: bytes, bytearray 6.2 Getting the data type 用type()，可以獲取此variable的類型 6.3 Setting the specific data type 我們只要在value的前面，加上想宣告的資料類型，就可明確的定義出這種type的value # 基本款 x = str(&quot;Hello World&quot;) x = int(20) x = float(20.5) x = complex(1j) x = bool(True) # collections x = list((&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;)) x = tuple((&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;)) x = range(6) x = dict(name = &quot;john&quot;, age = 36) x = set((&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;)) x = frozenset((&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;)) # binary x = bytes(5) x = bytearray(5) x = memoryview(bytes(5)) "],["int-float-整理與實戰.html", "Chapter 7 int &amp; float 整理與實戰 7.1 建立int/float變數 7.2 宣告int/float變數 7.3 型別轉換", " Chapter 7 int &amp; float 整理與實戰 7.1 建立int/float變數 int是整數，float是浮點數，當你assign variable時，python基本上就是看你有沒有小數點來做type的判定： x = 1 print(type(x)) #&gt; &lt;class &#39;int&#39;&gt; y = 1.0 print(type(y)) #&gt; &lt;class &#39;float&#39;&gt; 7.2 宣告int/float變數 我們可以用casting的方式，來直接標明我的變數類型 x = int(1) print(type(x)) #&gt; &lt;class &#39;int&#39;&gt; y = float(1.0) print(type(y)) #&gt; &lt;class &#39;float&#39;&gt; 7.3 型別轉換 如果把int轉成float，就幫你加小數點：e.g. 1 -&gt; 1.0 如果把float轉成int，會無條件捨去 x = 1 print(float(x)) #&gt; 1.0 y = 1.6 print(int(y)) #&gt; 1 "],["string整理與實戰.html", "Chapter 8 string整理與實戰 8.1 字串的定義 8.2 字串的基本操作 8.3 字串的format (i.e. R的paste()功能) 8.4 字串的join (i.e. R的collapse)", " Chapter 8 string整理與實戰 8.1 字串的定義 可以用單引號、雙引號做定義 a = &#39;hank&#39; print(a) #&gt; hank print(type(a)) #&gt; &lt;class &#39;str&#39;&gt; b = &quot;tom&quot; print(b) #&gt; tom print(type(b)) #&gt; &lt;class &#39;str&#39;&gt; 如果字串中含有單引號，那就用雙引號定義，反之亦然 a = &#39;tom is &quot;good&quot;&#39; print(a) #&gt; tom is &quot;good&quot; b = &quot;hank is &#39;bad&#39;&quot; print(b) #&gt; hank is &#39;bad&#39; 如果字串中又有單引號，雙引號，那就用三個單引號做定義 c = &#39;&#39;&#39; tom is &quot;good&quot;, and hank is &#39;bad&#39; &#39;&#39;&#39; print(c) #&gt; #&gt; tom is &quot;good&quot;, and hank is &#39;bad&#39; 8.2 字串的基本操作 8.2.1 利用\\來定義逃脫字元 例如換行是\\n a = &quot;abc\\nabc&quot; a #&gt; &#39;abc\\nabc&#39; 直接打a時，他給你看原始樣貌 但用print時，就會給你看顯示時的樣子 print(a) #&gt; abc #&gt; abc 8.2.2 把字串看成list，index時從0開始 a = &quot;hank&quot; a[2] #&gt; &#39;n&#39; 8.2.3 字串常用功能：去空白、改小寫、取代 假設現在我有一個字串 s = &#39; Last Checkpoint: a few seconds ago (unsaved change) &#39; s #&gt; &#39; Last Checkpoint: a few seconds ago (unsaved change) &#39; 可以發現，這個字串的最前面和最後面都有空白，蠻討厭的，可以用.strip()來去掉 a = s.strip() a #&gt; &#39;Last Checkpoint: a few seconds ago (unsaved change)&#39; 然後大小寫交錯，在NLP中也很擾人，所以全改成小寫 a = a.lower() a #&gt; &#39;last checkpoint: a few seconds ago (unsaved change)&#39; 最後，如果我想把”(“和”)“都取代成”#“，就用replace a = a.replace(&quot;(&quot;, &quot;#&quot;) a #&gt; &#39;last checkpoint: a few seconds ago #unsaved change)&#39; a = a.replace(&quot;)&quot;, &quot;#&quot;) a #&gt; &#39;last checkpoint: a few seconds ago #unsaved change#&#39; 大功告成 而實務上在做時，喜歡一條龍做下去，比較好讀： s2 = a.strip().lower().replace(&quot;(&quot;, &quot;#&quot;).replace(&quot;(&quot;, &quot;#&quot;) s2 #&gt; &#39;last checkpoint: a few seconds ago #unsaved change#&#39; 8.3 字串的format (i.e. R的paste()功能) 假設我現在有兩個字串 name = &#39;python&#39; age = 27 那如果我想format出一個句子是： “我是python, 我今年27歲了”，那我可以怎麼做？ 在R裡面就是用paste，那現在在python裡面，就有特定的format方法 8.3.1 直接一路加號到底 new_str = &quot;我是&quot; + name + &quot;，我今年&quot; + str(age) + &quot;歲了&quot; print(new_str) #&gt; 我是python，我今年27歲了 恩，可以work，但這樣寫別人會把你當北七 8.3.2 用%s, %d 來做 直接看例子： new_str_1 = &quot;我是%s, 我今年%d歲了&quot; % (name, age) print(new_str_1) #&gt; 我是python, 我今年27歲了 裡面的%s的s是指string，%d的d是指double，所以他會宣告對應的type，然後最後再丟對應的object 介紹這個只是為了知道有這種寫法而已，這是python 2時代的寫法，現在python3也沒人這樣寫了 8.3.3 用{}和.format 第一種寫法，照著位子順序定義 new_str_2 = &quot;我是{}, 我今年{}歲了&quot;.format(name, age) print(new_str_2) #&gt; 我是python, 我今年27歲了 第二種寫法，括號內定義variable再對應 new_str_3 = &quot;我是{var1}, 我今年{var2}歲了&quot;.format( var1 = name, var2 = age ) print(new_str_3) #&gt; 我是python, 我今年27歲了 這兩種寫法，是python2 ~ python 3.6的時代的寫法，的確比python2的寫法清楚多了 但一樣的，也漸漸沒人這樣寫了，因為python 3.6以後，大家就都改用以下更直覺的寫法了 8.3.4 用f吧! new_str_4 = f&quot;我是{name}, 我今年{age}歲了&quot; print(new_str_4) #&gt; 我是python, 我今年27歲了 太舒服了，f放在字串外面，就等於宣告他要做format，然後中括號內直接放variable，直覺阿!!! 8.4 字串的join (i.e. R的collapse) 剛剛介紹的format，其實就是對應到R中的paste，但R的paste還有一個很好用的功能是collapse，可以把多個字串給join在一起，例如： a = c(&quot;I&quot;, &quot;am&quot;, &quot;hank&quot;) paste(a, collapse = &quot; &quot;) #&gt; [1] &quot;I am hank&quot; paste(a, collapse = &quot;_&quot;) #&gt; [1] &quot;I_am_hank&quot; 那用python可以怎麼做呢？先示範最笨的，用for迴圈做 a = [&quot;I&quot;, &quot;am&quot;, &quot;hank&quot;] new = &quot;&quot; sep = &quot; &quot; for i in a: new = new + i + sep new #&gt; &#39;I am hank &#39; 那實際在做時，是用 .join這個method print(&quot; &quot;.join(a)) #&gt; I am hank print(&quot;_&quot;.join(a)) #&gt; I_am_hank "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
